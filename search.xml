<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[GPD Pocketの現状]]></title>
      <url>/2017/08/28/gpd-%E7%8F%BE%E7%8A%B6/</url>
      <content type="html"><![CDATA[<p>GPD PocketにUbuntuを入れ直してちょっとだけ快適になったので、その後にやったカスタマイズをちょっとメモ。<br>といっても大したことはしていないんですがｗ<br><a id="more"></a></p>
<h3 id="Touchegg"><a href="#Touchegg" class="headerlink" title="Touchegg"></a>Touchegg</h3><p>まずはタッチの環境と思い、Toucheggを導入。<br>ついでにTouchegg-gceをビルドしたんですが、<br>今回はインストールせずにそのままにしておきました。</p>
<p>設定は初期のやつからスクロールのものを削除。<br>なんか今回はスクロールがちゃんと作動していたのでその関係です。<br>その後ウィンドウの最大化と最小化を指２本に。<br>画面がちっちゃいのでデフォの３本だとちょっと難しかったので。</p>
<h3 id="Chromium"><a href="#Chromium" class="headerlink" title="Chromium"></a>Chromium</h3><p>前回はChromeを入れたんですが、今回はaptで入れられるChromiumにしました。<br>ただ、ログインキーリングがなんちゃらっていうのが出てきたので、<a href="http://s.jkunblog.com/article/175112460.html" target="_blank" rel="external">ここ</a>を参考に対処。<br>前回やったタッチの設定は今回はしていません。</p>
<h3 id="キーの設定"><a href="#キーの設定" class="headerlink" title="キーの設定"></a>キーの設定</h3><p>Winキーでメニューを出してほしかったので、キーボードのショートカットから<code>/usr/bin/xfce4-popup-whiskermenu</code>をWinキーに割り当てました。</p>
<p>文字入力ですが、Mozcのほうがデフォの入力が直接入力になっているので毎回設定し直すのが面倒なのもあり、Ibusの設定の入力メソッドをMozcのみにして、<br>Mozcの設定でIMEオンオフを切り替えるように変えました。</p>
<p>CapsとかDelete、BS等の変更はしないで、そのままです。</p>
<p>前回おかしかった記号系はキーボードの選択を間違えていただけだったので正しいのにしたら問題なくなりました。</p>
<h3 id="Mikutter"><a href="#Mikutter" class="headerlink" title="Mikutter"></a>Mikutter</h3><p>前回もMikutterを入れていたので今回もすかさず導入です。<br>Pluginは以下の通り。</p>
<p>画像のインライン表示<br><a href="https://github.com/moguno/mikutter-subparts-image" target="_blank" rel="external">mikutter-subparts-image</a><br>タブのアイコンサイズ変更<a href="https://github.com/moguno/mikutter-tab-hardpoint" target="_blank" rel="external">mikutter-tab-hardpoint
</a><br>画像つき投稿を可能にする<a href="https://github.com/moguno/mikutter-uwm-hommage" target="_blank" rel="external">mikutter-uwm-hommage</a></p>
<p>あとはフォントサイズを１７くらいに変更しています。</p>
<h3 id="Guake-ターミナル"><a href="#Guake-ターミナル" class="headerlink" title="Guake (ターミナル)"></a>Guake (ターミナル)</h3><p>ターミナルがちょっと使いづらいと思っていたので他のGPD Pocketユーザさんが使っていたGuakeを導入してみました。<br>普通にaptからインストールできます。</p>
<p>まだ設定等はいじっていません。</p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>rbenvをつかって前と同じ感じで入れてます。</p>
<h3 id="パネル"><a href="#パネル" class="headerlink" title="パネル"></a>パネル</h3><p>パネルも時計が見やすいように変更しています。<br>一番右側におっきめでデジタル時計を配置。<br>あとは最小限に音量、メール、バッテリーの残りパーセンテージと時間、Wi-Fi、Bluetooth、Mozc、Guakeですね。</p>
<h3 id="mstdn"><a href="#mstdn" class="headerlink" title="mstdn"></a>mstdn</h3><p>Mastodonクライアントをお試しで入れてみました。<br>普通に使いやすいですｗ<br>カスタマイズはしていないですが、LTLをデフォにしておきました。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>前回も書きましたがHexoの環境をこちらでつくりました。<br>というのもGPD Pocketは基本持ち運び用で、すでに存在しているBlogよりは編集するのに通信も使わなそうだから。<br>あとはオフラインで作成しておいて、あとからデプロイできるっていうのもいいですね。</p>
<p>HexoのPluginについては別の記事でｗ</p>
<h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p>テキストエディターはAtomを選びました。<br>もともとWindowsで使っているというのもありますし、<br>Markdownのプレビューを見ながらかけるというのが個人的に利点です。<br>もちろん他の言語でもハイライトしてくれるので重宝できます。</p>
<p>この記事もAtomで書いてます。</p>
<p>とそんな感じでしょうか。</p>
<h3 id="不具合について"><a href="#不具合について" class="headerlink" title="不具合について"></a>不具合について</h3><p>不具合も確認しています。<br>まずはBluetoothテザリングは相変わらず無理です。<br>マウスは大丈夫なので完全にだめというわけではないのかもしれないです。</p>
<p>Type-cが認識しないです。<br>ただ、個人的には使うことがないので今のとこ問題なしです。</p>
<p>”T”キーが柔い。。<br>ちょっとだけ他のキーより柔らかくて、一回キートップが外れてしまいました。</p>
<p>サスペンドについては自宅で数時間放置する分には問題ありませんでした。<br>ただ、持ち運んでいるときに勝手に復帰していたのでなにか問題がありそうです。</p>
<p>という感じで今回はこのへんで。<br>このブログは他のブログとの切り分けも兼ねて基本的にGPD Pocket関連ばっかりで行くと思います。</p>
<p>では、また。</p>
]]></content>
      
        
        <tags>
            
            <tag> gpdpocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GPD Pocketの話]]></title>
      <url>/2017/08/25/gpdpocket/</url>
      <content type="html"><![CDATA[<p>ブログの方に書いていたとおり、最近IGGでGPD Pocketに出資していたためのんびり使っているわけですが、<br>なんか最初にインストールしたXubuntuが安定していなかったのでもう一回入れ直しました。<br><a id="more"></a><br><!-- toc --></p>
<h3 id="使っているやつ"><a href="#使っているやつ" class="headerlink" title="使っているやつ"></a>使っているやつ</h3><p><a href="https://github.com/stockmind/gpd-pocket-ubuntu-respin" target="_blank" rel="external">gpd pocket ubuntu respin</a><br>前回はXubuntu１７．０４を上記をつかって自分でリビルドしたやつ<br>今回はすでに用意されていたリビルド済みのUbuntu１７．０４</p>
<h3 id="おかしかった点"><a href="#おかしかった点" class="headerlink" title="おかしかった点"></a>おかしかった点</h3><p>まずイヤホンから音が出ませんでした。。。<br>次にBluetoothテザリングが使えませんでした。<br>接続できる！とおもったら即切れる感じです。。。<br>ただし、マウスとかは使えたので全部が死んでいるわけではなさそう。</p>
<p>上記をなおそうと色々いじっていたら更におかしくなりどうしようもなくなったので入れ直そうと判断ｗ</p>
<h3 id="入れ直し"><a href="#入れ直し" class="headerlink" title="入れ直し"></a>入れ直し</h3><p>入れ直すのに前回と同じ感じでリビルドしたらまたおかしくなる気もしたので、すでに用意されているUbuntuイメージを使うことに。</p>
<p>れどめに書いてあるとおり普通にインストールしたあと、<br><code>sudo apt install xubuntu-desktop</code><br>を叩いて前とおんなじXfce環境へ！</p>
<p>なんか今回はタッチでのスクロールが使えたり、入力がマシになってたり、いい感じ。</p>
<p>それとイヤホンの件もなおったんですが、Bluetoothテザリングだけはだめで、結局諦めることに。。<br>Wi-Fiが使えないのでできれば使いたかったんですが、仕方ないのでいままで通りUSBテザリングにします。</p>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>今の所、HexoとRubyの勉強環境のみといった感じです。<br>エディタは前から使っているAtomを選びました。<br>Atomは公式のレポジトリにパッケージが上がっているのでふつうにdpkg installするだけです。</p>
<p>あとは、HexoようにMarkdownの環境を整えて完了です。<br><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/karasu_sue/status/901102350214905856" target="_blank" rel="external"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>
<p>てなかんじで今回はこのへんで！</p>
]]></content>
      
        
        <tags>
            
            <tag> gpdpocket </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Crowiを導入してみた！]]></title>
      <url>/2017/08/23/crowi/</url>
      <content type="html"><![CDATA[<p>日々なんかしらメモしたくなることが多く、なにかいいメモ帳ないかなぁと思いながらEvernoteを使っていたんですが、<br>ふと、さくらのVPSでCrowiのスタートアップスクリプトの提供を・・という記事を見つけて、TwitterのTLでもCrowiという単語が流れてきたのもあり、<br>いろいろ調べてみたところ、Markdownで気軽に書けるWikiやメモ帳といった感じだったので導入してみました。</p>
<p>で、さっそくその時のメモ書きです。</p>
<a id="more"></a>
<!-- toc -->
<h2 id="crowi構築"><a href="#crowi構築" class="headerlink" title="crowi構築"></a>crowi構築</h2><h3 id="基本的な内容"><a href="#基本的な内容" class="headerlink" title="基本的な内容"></a>基本的な内容</h3><blockquote>
<p><a href="http://d.hatena.ne.jp/akishin999/20161225/1482682979" target="_blank" rel="external">http://d.hatena.ne.jp/akishin999/20161225/1482682979</a>  </p>
</blockquote>
<p>Redisはいれていない</p>
<h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><p>レポジトリ定義作成<br><code>vim /etc/yum.repos.d/mongodb.repo</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[mongodb]</div><div class="line">name=MongoDB repo</div><div class="line">baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/</div><div class="line">gpgcheck=0</div><div class="line">enabled=0</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum --enablerepo=mongodb install -y mongodb-org</div></pre></td></tr></table></figure>
<p>DBとユーザーを作成する<br>Mysqlしか知らなかったのでいろいろ調べた<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongo</div><div class="line">use 使いたいDB名</div><div class="line">db.createUser(&#123;user: ユーザ名, pwd: パスワード, roles: [&#123;role: &quot;readWrite&quot;, db: 使いたいDB名&#125;]&#125;)</div></pre></td></tr></table></figure></p>
<p>MySQLより分かりやすい気がする</p>
<h4 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h4><p>レポジトリの登録<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh https://rpm.nodesource.com/pub_4.x/el/7/x86_64/nodesource-release-el7-1.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>インストールしようとしたらエラーが出たので、以下のコマンドを実行で回避<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -ivh https://kojipkgs.fedoraproject.org//packages/http-parser/2.7.1/3.el7/x86_64/http-parser-2.7.1-3.el7.x86_64.rpm https://kojipkgs.fedoraproject.org//packages/http-parser/2.7.1/3.el7/x86_64/http-parser-devel-2.7.1-3.el7.x86_64.rpm &amp;&amp; yum -y install nodejs-devel</div></pre></td></tr></table></figure></p>
<p>再度インストールと、ついでに依存系も入れる<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install nodejs krb5-devel gcc-c++ git</div></pre></td></tr></table></figure></p>
<p>(自分の環境だとすでに入っていた)</p>
<p>　　</p>
<h4 id="検索できるようにElasticsearchを入れる"><a href="#検索できるようにElasticsearchを入れる" class="headerlink" title="検索できるようにElasticsearchを入れる"></a>検索できるようにElasticsearchを入れる</h4><p>検索を有効にしておきたいので、Elasticsearchを入れておきます</p>
<p>Javaがいるようなので、入れます（v1.7.0以上じゃないとだめみたいです）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install java-1.8.0</div></pre></td></tr></table></figure></p>
<p>ElasticsearchをレポジトリからインストールするためGPG-KEYを取得<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</div></pre></td></tr></table></figure></p>
<p>定義ファイルを作成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[elasticsearch-2.x]</div><div class="line">name=Elasticsearch repository for 2.x packages</div><div class="line">baseurl=https://packages.elastic.co/elasticsearch/2.x/centos</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://packages.elastic.co/GPG-KEY-elasticsearch</div><div class="line">enabled=0</div></pre></td></tr></table></figure></p>
<p>インストールする<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum --enablerepo=elasticsearch-2.x install -y elasticsearch</div></pre></td></tr></table></figure></p>
<p>後はいつも通り有効にしておきます</p>
<p>また、日本語に対応させるためにanalysis-kuromojiを入れます<br>（これがjava 1.7.0じゃないとだめらしい）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/share/elasticsearch/bin/plugin install analysis-kuromoji</div></pre></td></tr></table></figure></p>
<p>あとは、Elesticsearchを再起動して正常動作を確認します<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET &apos;http://localhost:9200/_nodes/plugins?pretty&apos;</div></pre></td></tr></table></figure></p>
<h4 id="Crowiをインストール"><a href="#Crowiをインストール" class="headerlink" title="Crowiをインストール"></a>Crowiをインストール</h4><p>インストールするディレクトリを決めておく<br>あとはcloneする<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/crowi/crowi.git</div><div class="line"><span class="built_in">cd</span> crowi</div></pre></td></tr></table></figure></p>
<p>最新でチェックアウトする、mastodonでgitがわからず意味不明だったが、その時に調べておいてよかった<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout $(git tag | sort -V | tail -n 1)</div></pre></td></tr></table></figure></p>
<p>インストール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>上記で少し時間がかかったが、終わったらcssとjsをビルドする<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure></p>
<p>opensslでシード値を出すらしい・・・（よくわかっていないｗ）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rand -base64 128 | head -1</div></pre></td></tr></table></figure></p>
<p>　　</p>
<h4 id="サービスとして登録"><a href="#サービスとして登録" class="headerlink" title="サービスとして登録"></a>サービスとして登録</h4><p>serviceの登録は以下の通り<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line"></div><div class="line">Description=Crowi</div><div class="line">After=network.target mongod.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">WorkingDirectory=&#123;配置したフォルダ&#125;</div><div class="line">EnvironmentFile=/etc/systemd/system/crowi.conf</div><div class="line">ExecStart=/usr/bin/node app.js</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure></p>
<p>設定も一緒に(ポートは自由に)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PORT=3500</div><div class="line">NODE_ENV=production</div><div class="line">MONGO_URI=&quot;mongodb://&#123;USER_ID&#125;:&#123;USER_PASSWORD&#125;@localhost/&#123;DB_NAME&#125;&quot;</div><div class="line">ELASTICSEARCH_URI=http://127.0.0.1:9200</div><div class="line">PASSWORD_SEED=&quot;&#123;opensslで出したやつ&#125;&quot;</div><div class="line">FILE_UPLOAD=local</div></pre></td></tr></table></figure></p>
<p>後は起動して確認後、自動起動にして終わり<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start crowi.service</div><div class="line">sudo systemctl enable crowi</div></pre></td></tr></table></figure></p>
<p>と、以上で導入が完了しました！<br>ElesticSearchを使用するには、設定の検索管理からBuildNowを押さなきゃいけないので注意です！<br>私は気づかずにエラーになってて無駄に時間くった・・・</p>
]]></content>
      
        
        <tags>
            
            <tag> Crowi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[すうのつぶやきについて]]></title>
      <url>/2017/08/23/about/</url>
      <content type="html"><![CDATA[<p>すうのつぶやきではブログ<a href="https://blog.xn--krsgw--n73t.com/" target="_blank" rel="external">嶽内の里</a>からちょっとはみ出した、ほんとにちょっとしたつぶやきを記載していきます</p>
<p>といっても実際の目的はGithub Pagesを利用していい加減Gitに慣れようよｗといった感じだったりします。　　<br>まぁとにかくのんびり書いていくので？よろしくお願いします。</p>
]]></content>
      
        
        <tags>
            
            <tag> info </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
